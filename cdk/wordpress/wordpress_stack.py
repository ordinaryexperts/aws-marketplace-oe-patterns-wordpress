import json
import os
import subprocess
from aws_cdk import (
    Aws,
    aws_iam,
    aws_secretsmanager,
    aws_sns,
    CfnCondition,
    CfnMapping,
    CfnOutput,
    CfnParameter,
    Fn,
    Stack,
    Token
)
from constructs import Construct

from oe_patterns_cdk_common.alb import Alb
from oe_patterns_cdk_common.app_deploy_pipeline import AppDeployPipeline
from oe_patterns_cdk_common.asg import Asg
from oe_patterns_cdk_common.aurora_cluster import AuroraMysql
from oe_patterns_cdk_common.db_secret import DbSecret
from oe_patterns_cdk_common.dns import Dns
from oe_patterns_cdk_common.efs import Efs
from oe_patterns_cdk_common.ses import Ses
from oe_patterns_cdk_common.util import Util
from oe_patterns_cdk_common.vpc import Vpc

DEFAULT_WORDPRESS_SOURCE_URL="https://ordinary-experts-aws-marketplace-wordpress-pattern-artifacts.s3.amazonaws.com/aws-marketplace-oe-patterns-wordpress-default/refs/tags/6.2.2.zip"
TWO_YEARS_IN_DAYS=731
if 'TEMPLATE_VERSION' in os.environ:
    template_version = os.environ['TEMPLATE_VERSION']
else:
    try:
        template_version = subprocess.check_output(["git", "describe"]).strip().decode('ascii')
    except:
        template_version = "CICD"

# When making a new development AMI:
# 1) $ ave oe-patterns-dev make ami-ec2-build
# 2) $ ave oe-patterns-dev make AMI_ID=ami-fromstep1 ami-ec2-copy
# 3) Copy the code that copy-image generates below

# AMI list generated by:
# make AMI_ID=ami-0f1c0bb91a7301da3 ami-ec2-copy
# on Fri Feb 23 03:38:06 UTC 2024.
AMI_ID="ami-0f1c0bb91a7301da3"
AMI_NAME="ordinary-experts-patterns-wordpress--20240223-0321"
generated_ami_ids = {
    "ap-northeast-1": "ami-02ed22ae965cabba6",
    "ap-northeast-2": "ami-0f1a5e4ac7813b766",
    "ap-northeast-3": "ami-06601e5fbd1cf853f",
    "ap-south-1": "ami-093f11b42bfb3ff7a",
    "ap-southeast-1": "ami-05350e7c719ca451f",
    "ap-southeast-2": "ami-067d7105c661288ca",
    "ca-central-1": "ami-01112f361e566715c",
    "eu-central-1": "ami-08b52ba078b39f432",
    "eu-north-1": "ami-065376aa3d878c77b",
    "eu-west-1": "ami-0e1cb415349681f22",
    "eu-west-2": "ami-030592da8760c2333",
    "eu-west-3": "ami-087f872585c0fef1a",
    "sa-east-1": "ami-0f9b545eaa51606b7",
    "us-east-2": "ami-0cdc8f7249ed89bbe",
    "us-west-1": "ami-030839a6607da95b9",
    "us-west-2": "ami-0ed709fd59f41e79b",
    "us-east-1": "ami-0f1c0bb91a7301da3"
}
# End generated code block.

# Sanity check: if this fails then make ami-ec2-copy needs to be run...
assert AMI_ID == generated_ami_ids["us-east-1"]

class WordPressStack(Stack):

    def __init__(self, scope: Construct, id: str, **kwargs) -> None:
        super().__init__(scope, id, **kwargs)

        #
        # INITIALIZATION
        #

        ami_mapping={
            "AMI": {
                "AMI": AMI_NAME
            }
        }
        for region in generated_ami_ids.keys():
            ami_mapping[region] = { "AMI": generated_ami_ids[region] }
        CfnMapping(
            self,
            "AWSAMIRegionMap",
            mapping=ami_mapping
        )

        #
        # PARAMETERS
        #

        notification_email_param = CfnParameter(
            self,
            "NotificationEmail",
            default="",
            description="Optional: Specify an email address to get emails about deploys and other system events. This email is only used within this stack to subscribe to an SNS topic and is not sent to any third party."
        )
        word_press_env_param = CfnParameter(
            self,
            "WordPressEnv",
            allowed_values=[ "development", "staging", "production" ],
            default="production",
            description="Optional: The environment (WP_ENV) for the WordPress site."
        )

        #
        # CONDITIONS
        #
        notification_email_exists_condition = CfnCondition(
            self,
            "NotificationEmailExists",
            expression=Fn.condition_not(Fn.condition_equals(notification_email_param.value, ""))
        )

        #
        # RESOURCES
        #

        # vpc
        vpc = Vpc(
            self,
            "Vpc"
        )

        dns = Dns(self, "Dns")

        ses = Ses(
            self,
            "Ses",
            hosted_zone_name=dns.route_53_hosted_zone_name_param.value_as_string
        )

        # db_secret
        db_secret = DbSecret(
            self,
            "DbSecret"
        )

        db = AuroraMysql(
            self,
            "Db",
            database_name="wordpress",
            db_secret=db_secret,
            vpc=vpc
        )

        config_secrets = [
            'AUTH_KEY',
            'AUTH_SALT',
            'LOGGED_IN_KEY',
            'LOGGED_IN_SALT',
            'NONCE_KEY',
            'NONCE_SALT',
            'SECURE_AUTH_KEY',
            'SECURE_AUTH_SALT'
        ]
        config_secret_constructs = {}
        for config_secret in config_secrets:
            config_secret_constructs[config_secret] = aws_secretsmanager.CfnSecret(
                self,
                "Config_{}".format(config_secret),
                generate_secret_string=aws_secretsmanager.CfnSecret.GenerateSecretStringProperty(
                    exclude_characters="\"'",
                    generate_string_key="value",
                    password_length=64,
                    secret_string_template=json.dumps({})
                ),
                name="{}/wordpress/secret_{}".format(Aws.STACK_NAME, config_secret)
            )

        # notifications
        notification_topic = aws_sns.CfnTopic(
            self,
            "NotificationTopic",
            topic_name=Util.append_stack_uuid(f"{Aws.STACK_NAME}-notifications")
        )
        notification_subscription = aws_sns.CfnSubscription(
            self,
            "NotificationSubscription",
            protocol="email",
            topic_arn=notification_topic.ref,
            endpoint=notification_email_param.value_as_string
        )
        notification_subscription.cfn_options.condition = notification_email_exists_condition
        aws_iam.PolicyDocument(
            statements=[
                aws_iam.PolicyStatement(
                    effect=aws_iam.Effect.ALLOW,
                    actions=[ "sns:Publish" ],
                    resources=[ notification_topic.ref ]
                )
            ]
        )

        pipeline = AppDeployPipeline(
            self,
            "AppDeployPipeline",
            after_deploy_commands = [
                "BASE_DEPLOY_DIR=\$(cat /opt/codedeploy-agent/deployment-root/deployment-instructions/*_last_successful_install)",
                "DEPLOY_DIR=\$BASE_DEPLOY_DIR/deployment-archive/",
                "chown -R www-data:www-data \$DEPLOY_DIR",
                "find \$DEPLOY_DIR -type d -exec chmod 755 {} +",
                "find \$DEPLOY_DIR -type f -exec chmod 644 {} +",
                "mkdir -p /var/www/app",
                "rsync -avzh --delete \$DEPLOY_DIR /var/www/app",
                "if [ ! -L /var/www/app/bedrock/web/app/uploads ]; then",
                "  rm -rf /var/www/app/bedrock/web/app/uploads",
                "  ln -s /mnt/efs/wordpress/uploads /var/www/app/bedrock/web/app/uploads",
                "fi",
                "service apache2 reload"
            ],
            after_build_commands = [
                "curl -sS https://getcomposer.org/installer -o /tmp/composer-setup.php",
                "php /tmp/composer-setup.php --install-dir=.",
                "cd bedrock && ../composer.phar install"
            ],
            demo_source_url=DEFAULT_WORDPRESS_SOURCE_URL,
            notification_topic_arn=Token.as_string(notification_topic.ref)
        )

        secret_arns = [db_secret.secret_arn(), ses.secret_arn()]
        for key, construct in config_secret_constructs.items():
            secret_arns.append(construct.ref)

        with open("wordpress/user_data.sh") as f:
            launch_config_user_data = f.read()
        asg = Asg(
            self,
            "Asg",
            deployment_rolling_update = True,
            pipeline_bucket_arn = pipeline.pipeline_artifact_bucket_arn,
            secret_arns=secret_arns,
            use_graviton=False,
            user_data_contents=launch_config_user_data,
            user_data_variables = {
                "WordPressEnv": word_press_env_param.value_as_string,
                "Prefix": "{}/wordpress/secret".format(Aws.STACK_NAME),
                "DbSecretArn": db_secret.secret_arn(),
                "Hostname": dns.hostname(),
                "HostedZoneName": dns.route_53_hosted_zone_name_param.value_as_string,
                "InstanceSecretName": Aws.STACK_NAME + "/instance/credentials"
            },
            vpc=vpc
        )
        asg.asg.node.add_dependency(db.db_primary_instance)
        asg.asg.node.add_dependency(ses.generate_smtp_password_custom_resource)

        Util.add_sg_ingress(db, asg.sg)

        pipeline.add_asg_to_deployment_group(asg)

        # efs
        efs = Efs(self, "Efs", app_sg=asg.sg, vpc=vpc)

        alb = Alb(self, "Alb", asg=asg, vpc=vpc)
        asg.asg.target_group_arns = [ alb.target_group.ref ]
        dns.add_alb(alb)

        CfnOutput(
            self,
            "FirstUseInstructions",
            description="Instructions for getting started",
            value="Click on the DnsSiteUrlOutput link and follow the instructions for installing the WordPress site."
        )

        parameter_groups = [
            {
                "Label": {
                    "default": "Application Config"
                },
                "Parameters": [
                    word_press_env_param.logical_id,
                    notification_email_param.logical_id
                ]
            }
        ]
        parameter_groups += alb.metadata_parameter_group()
        parameter_groups += asg.metadata_parameter_group()
        parameter_groups += db.metadata_parameter_group()
        parameter_groups += db_secret.metadata_parameter_group()
        parameter_groups += dns.metadata_parameter_group()
        parameter_groups += efs.metadata_parameter_group()
        parameter_groups += ses.metadata_parameter_group()
        parameter_groups += vpc.metadata_parameter_group()

        # AWS::CloudFormation::Interface
        self.template_options.metadata = {
            "OE::Patterns::TemplateVersion": template_version,
            "AWS::CloudFormation::Interface": {
                "ParameterGroups": parameter_groups,
                "ParameterLabels": {
                    notification_email_param.logical_id: {
                        "default": "Notification Email"
                    },
                    word_press_env_param.logical_id: {
                        "default": "WordPress Environment"
                    },
                    **alb.metadata_parameter_labels(),
                    **asg.metadata_parameter_labels(),
                    **db.metadata_parameter_labels(),
                    **db_secret.metadata_parameter_labels(),
                    **dns.metadata_parameter_labels(),
                    **efs.metadata_parameter_labels(),
                    **ses.metadata_parameter_labels(),
                    **vpc.metadata_parameter_labels()
                }
            }
        }
